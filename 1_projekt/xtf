#!/bin/sh
#IOS Projekt 1: Autor: Igor Lacko (xlackoi00)
export POSIXLY_CORRECT=yes
export LC_ALL=C
export XTF_PROFIT

#function which will handle the help argument
PrintHelp(){ 
    echo "Usage: xtf [-h|--help] [FILTER] [COMMAND] USER LOG [LOG 2 [...]"
    printf "1. -h and --help print out the guide to using the script
2. FILTER can be via -b DATETIME or -a DATETIME (in the format YYYY-MM-DD HH:MM:SS), where the filter -b takes only
the logs before this date into consideration (non-included) and -a does the same but after.
The filter -c CURRENCY only takes into consideration logs matching the currency specified.
3. COMMAND can be one of list, list-currency, status or profit, where:\n \tlist prints out all the logs for the current user
\tlist-currency prints out the sorted list of the current user's currencies 
\tstatus prints out the real account balancefor the current user sorted by the currencies
\tprofit prints out the user's account balance with the fictive profit\n" 
    exit 0
}

#checking if the datetime format matches YYYY-MM-DD HH:MM:SS or if the currency format is three letters
DatetimeCurrencyCheck(){
    #correct formats to be used for pattern matching
    datetime_format='^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]$'
    currency_format='^[a-zA-Z][a-zA-Z][a-zA-Z]$'
    #depenting on the filter, we pass the date/currency we get as standard output to grep's standard input so it can search for the correct pattern 
    if [ "$1" = "a" ]  ; then
        if echo "$DATETIME_AFTER" | grep -q "$datetime_format" ; then #use grep -q so it doesn't write anything to stdout
            return
        else 
            echo "ERROR: Invalid datetime format!!!" 1>&2 #print to stderr and exit with 1 if not matched, do the same for all filter
            exit 1
        fi
    elif [ "$1" = "b" ] ; then 
        if echo "$DATETIME_BEFORE" | grep -q "$datetime_format" ; then
            return
        else 
            echo "ERROR: Invalid datetime format!!!" 1>&2
            exit 1
        fi
    elif [ "$1" = "c" ]  ; then
        if echo "$2" | grep -q "$currency_format" ; then
            return
        else 
            echo "ERROR: Invalid currency format!!!" 1>&2
            exit 1
        fi

    fi
}

#loads the contents of the file to stdout, will be piped to awk later
Load(){
    for LOG in "$@" ; do
        if echo "$LOG" | grep -q '^.*\.gz$' ; then #if it's a zipped file
            zcat "$LOG"
        else 
            cat "$LOG"
        fi
    
    done 
}

#command to print out the account balance with the fictive XTF_PROFIT variable counted
Profit(){
    #give the stdout of the Load function to the stdin of awk
    Load "$@" | awk -F ';' -v user="$username" -v profit="$XTF_PROFIT" -v c_filter="$filtered_currency" -v d_after="$DATETIME_AFTER" -v d_before="$DATETIME_BEFORE" -v mult="$multiple_currencies" '
    BEGIN{
        if(mult=="true"){
            split(c_filter, c_filters, ";") #if filtering multiple currencies, split them into an array
        }
    }  
    {
        if((user==$1) && ($3~c_filter ) && (mult!="true")){ #check if it matches all the condidions
            if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) ){
            currency[$3] += $4 #add the transaction to the current sum
            }
        }
        else if((user==$1) && (mult=="true")){
            for(current in c_filters){
                if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) && ($3==c_filters[current])){
                    currency[$3] += $4
                }
            }
        }
    } 
    END{
        for(i in currency){ 
            if(currency[i] > 0){
                currency[i] = currency[i] * (1 + (profit / 100)); #if the profit is positive, add XTF_PROFIT percent to it
            }
            printf("%s : %.4f\n", i, currency[i])
        }
    }'  | sort 
}

#command to print out the account balance for each currency for the user specified
Status(){
    Load "$@" | awk -F ';' -v user="$username" -v c_filter="$filtered_currency" -v d_after="$DATETIME_AFTER" -v d_before="$DATETIME_BEFORE" -v mult="$multiple_currencies" '
    BEGIN{
        if(mult=="true"){
            split(c_filter, c_filters, ";") 
        }
    }
    {
        if((user==$1) && ($3~c_filter) && (mult!="true")){
            if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) ){
                currency[$3] += $4;
            }
        }
        else if((user==$1) && (mult=="true")){
            for(current in c_filters){
                if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) && ($3==c_filters[current])){
                    currency[$3] += $4 
                }
            }
        }
    }
    END{
        for(i in currency){ #the same command as profit, without adding xtf_profit percent
            printf("%s : %.4f\n",i ,currency[i]);
        }
    }'  | sort 
}

#command to print out the currencies which the specified user has in sorted order alphabetically
ListCurrency(){
    Load "$@" | awk -F ';' -v user="$username" -v c_filter="$filtered_currency" -v d_before="$DATETIME_BEFORE" -v d_after="$DATETIME_AFTER" -v mult="$multiple_currencies" '
    BEGIN{
        if(mult=="true"){
            split(c_filter, c_filters, ";")
        }
    }
    {
        if((user==$1) && ($3~c_filter) && (mult!="true")){
            if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) ){
                print($3)
            }
        }
        else if((user==$1) && (mult=="true")){
            for(current in c_filters){
                if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) && ($3==c_filters[current])){
                    print(c_filters[current])
                }
            }
        }
    }'  | sort -u #-u specifier for sort to get unique output
}

#default command, lists all the logs for the specified user
List(){
    #pass needed variables, meaning all filters, username and a flag telling us if we are filtering one currency or multiple
    Load "$@" | awk -F ';' -v user="$username" -v c_filter="$filtered_currency" -v d_after="$DATETIME_AFTER" -v d_before="$DATETIME_BEFORE" -v mult="$multiple_currencies" '
    BEGIN{ #begin block to split the currencies into an array if we are filtering multiple
        if(mult=="true"){
            split(c_filter, c_filters, ";")
        }
    }
    {
        if((user==$1) && ($3~c_filter) && (mult!="true")){ #if filtering only one currency
            #if we do not have dates to compare, we ignore it since it is set as inactive
            if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) ){
                #printing the formatted log since all numbers need to be cut for 4 decimal places
                printf("%s;%s;%s;%.4f\n",$1,$2,$3,$4)
            }
        }
            else if((user==$1) && (mult=="true")){ #if filtering multiple currencies
                #same as before, only now we compare every currency in the currencies array
                for(current in c_filters){
                    if( ((d_before=="inactive") || ($2 < d_before)) && ((d_after=="inactive") || ($2 > d_after)) && ($3==c_filters[current])){
                        print($0)
                    }
                }
            }
    }' 
}



#fuction to check if the internal log format is correct
LogFormatCheck(){
    valid="$( Load "$@" | awk -F ';' -v c_format='^[a-zA-Z][a-zA-Z][a-zA-Z]$' -v d_format='^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]$' -v t_format='^-*[0-9]*\\.[0-9]*$' '
    {   #if the number of fields is not 4, or the second option does not match the date format (or third with currency) 
        if(((NF!=4) || !($2~d_format) || !($3~c_format) || !($4~t_format) || (length($1) == 0)) && (length($0) != 0)){
            print("ERROR: Invalid internal log format!")
            exit
        }
    }
    ')"
    if [ -n "$valid" ]; then #if something was printed into valid, then echo a error message and exit with 1
        echo "$valid" 1>&2
        exit 1 
    fi
}

#switches the various commands
Command(){
    if [ "$command" = "list" ];   then
        List "$@"
    elif [ "$command" = "list-currency" ];    then
        ListCurrency "$@"
    elif [ "$command" = "status" ];   then
        Status "$@"
    else
        Profit "$@"
    fi #condition end 
}

#MAIN

#setting XTF_PROFIT to 20 percent if none is specified
if [ -z "$XTF_PROFIT" ] ; then 
    XTF_PROFIT=20
fi

#setting needed variables
command= 
DATETIME_AFTER="inactive"
DATETIME_BEFORE="inactive"
filtered_currency=
multiple_currencies=false
user_loaded=false
#handling incorrect amount of arguments
if [ $# = 0  ] ; then
    echo ERROR: Invalid amount of arguments!
    exit 1
fi

#main loop to parse args
while [ "$user_loaded" = false ] || [ "$1" = -c ] || [ "$DATETIME_AFTER" = "inactive" ] || [ "$DATETIME_BEFORE" = "inactive" ] || [ -z "$command" ] ; do
#the condition for ending the loop is such that: while we do not have a user, or the arg recieved is -c or we don't have dates set or we don't have a command set
#then execute the loop, since either one of these means we still might have to parse some args (parsing logs happens after the loop), if this condition is
#negated, we can safely break out of the loop     
    #assigning individual args to their variables
    if [ "$1" = '-h' ] || [ "$1" = '--help' ]; then 
        PrintHelp #if help then we automatically print it and exit
    #if we get one of the filters as command
    elif [ "$1" = "-a" ] || [ "$1" = "-b" ] || [ "$1" = "-c" ]; then
        if [ "$1" = "-a" ] ; then
            if [ "$DATETIME_AFTER" = "inactive" ]; then
                DATETIME_AFTER=$2; DatetimeCurrencyCheck "a" "$DATETIME_AFTER" ; shift
            else
                echo "Error: You can only specify the date formats once!" 1>&2 #the date filters can be used only once
                exit 1
            fi
        elif [ "$1" = "-b" ] ; then
            if [ "$DATETIME_BEFORE" = "inactive" ] ; then 
                DATETIME_BEFORE=$2; DatetimeCurrencyCheck "b" "$DATETIME_BEFORE" ; shift
            else 
                echo "Error: You can only specify the date formats once!" 1>&2 #same as -a
                exit 1
            fi
        else
            if [ -n "$filtered_currency" ] ; then
                filtered_currency="$filtered_currency;$2"; DatetimeCurrencyCheck "c" "$2" ; multiple_currencies=true; shift
            else 
                filtered_currency="$2"; DatetimeCurrencyCheck "c" "$2" ; shift
            fi
        fi
    elif [ "$1" = "list" ] || [ "$1" = "list-currency" ] || [ "$1" = "status" ] || [ "$1" = "profit" ]; then
        #if we didn't get a command already, this is correct and we assign it to the command variable
        if [ -z "$command" ] ; then
            command="$1"; 
        else #if we already got a command, we print to stderr and exit with 1 since only one command can be used
            echo "ERROR: You can't enter multiple commands!!!" 1>&2
            exit 1
        fi
    else
        if [ "$user_loaded" = true ] ; then #if we already got a user and we get a non command/filter we assume the logs start and exit the loop 
            break 
        else #if we don't have a user we assign them to the username variable and set the user flag to true
            username="$1"
            user_loaded=true  
        fi
    fi
    if [ "$#" = 1 ]; then #if we get to the end of the arguments and still don't have any file
        echo "ERROR: Invalid amount of arguments!" 1>&2 
        exit 1
    fi  
    shift 
done

for LOG in "$@" ; do #checking if the files even exist or if we have read permissions
    if [ ! -f "$LOG" ]; then
        echo "ERROR: Couldn't find file $LOG!!!" 1>&2
        exit 1
    elif [ ! -r "$LOG" ]; then 
        echo "ERROR: You don't have permission to read file $LOG!!!" 1>&2
        exit 1
    fi
done


if [ -z "$filtered_currency" ] ; then #if we aren't filtering any currency, set the c filter to the regex format for currency so it always matches
    filtered_currency='^[a-zA-Z][a-zA-Z][a-zA-Z]$'
fi

if [ -z "$command" ]; then #set default list command if none was specified
    command="list"
fi



LogFormatCheck "$@"
Command "$@"



